// Code generated by protoc-gen-go. DO NOT EDIT.
// source: service.proto

package piggy

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("service.proto", fileDescriptor_a0b84a42fa06f626) }

var fileDescriptor_a0b84a42fa06f626 = []byte{
	// 239 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2d, 0x4e, 0x2d, 0x2a,
	0xcb, 0x4c, 0x4e, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2d, 0xc8, 0x4c, 0x4f, 0xaf,
	0x94, 0xe2, 0x4c, 0x29, 0xc9, 0x87, 0x88, 0x48, 0x71, 0xe7, 0xe6, 0xa7, 0xa4, 0xe6, 0x40, 0x38,
	0x46, 0xef, 0x99, 0xb8, 0x78, 0x02, 0x40, 0x2a, 0x82, 0x21, 0xba, 0x84, 0xcc, 0xb9, 0xd8, 0x82,
	0x33, 0xd3, 0xf3, 0x42, 0x0b, 0x84, 0x44, 0xf4, 0xc0, 0x5a, 0xf5, 0x20, 0xdc, 0xa0, 0xd4, 0xc2,
	0xd2, 0xd4, 0xe2, 0x12, 0x29, 0x51, 0x34, 0xd1, 0xe2, 0x82, 0xfc, 0xbc, 0xe2, 0x54, 0x25, 0x06,
	0x21, 0x2b, 0x2e, 0x76, 0xc7, 0x94, 0x14, 0xa7, 0xc4, 0xbc, 0x6c, 0x21, 0x98, 0x1a, 0x28, 0x1f,
	0xa6, 0x55, 0x0c, 0x5d, 0x18, 0xae, 0xd7, 0x93, 0x8b, 0x27, 0xb4, 0x20, 0x25, 0xb1, 0x24, 0xd5,
	0xa9, 0x34, 0x25, 0x3d, 0xb5, 0x44, 0x48, 0x0a, 0xaa, 0x12, 0x59, 0x10, 0x66, 0x8a, 0x34, 0x56,
	0x39, 0xb8, 0x51, 0xfe, 0x5c, 0x7c, 0x21, 0x89, 0xe9, 0x21, 0x45, 0x89, 0x79, 0xc5, 0x89, 0xc9,
	0x25, 0x99, 0xf9, 0x79, 0x42, 0x32, 0x50, 0x0d, 0xa8, 0xc2, 0x30, 0xe3, 0x64, 0x71, 0xc8, 0xc2,
	0x0d, 0xf4, 0xe3, 0x12, 0x0a, 0x2e, 0x29, 0x4a, 0x4d, 0xcc, 0x45, 0x92, 0x2e, 0x16, 0x52, 0x80,
	0x05, 0x03, 0x86, 0x14, 0xcc, 0x60, 0x21, 0x98, 0xc1, 0x08, 0x39, 0x25, 0x06, 0x03, 0x46, 0x27,
	0xfe, 0x28, 0x48, 0x94, 0x2c, 0x62, 0x62, 0x0d, 0xf0, 0x74, 0x77, 0x8f, 0x4c, 0x62, 0x03, 0xc7,
	0x84, 0x31, 0x20, 0x00, 0x00, 0xff, 0xff, 0x04, 0x2f, 0x1d, 0x30, 0xb9, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PiggyServiceClient is the client API for PiggyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PiggyServiceClient interface {
	// rpc to create a new user and add them to an existing team or create a new one.
	SignUp(ctx context.Context, in *SignUpRequest, opts ...grpc.CallOption) (*SignUpResponse, error)
	// rpc to add a bank institution's credentials to a team for tracking
	AddBank(ctx context.Context, in *AddBankRequest, opts ...grpc.CallOption) (*AddBankResponse, error)
	// rpc to update budget/bin data associated with a team
	UpdateBudget(ctx context.Context, in *UpdateBudgetRequest, opts ...grpc.CallOption) (*UpdateBudgetResponse, error)
	// rpc to tag a transaction with a corresponding bin
	TagTransaction(ctx context.Context, in *TagTransactionRequest, opts ...grpc.CallOption) (*TagTransactionResponse, error)
	// rpc to stream transactions given the request filter
	StreamTransactions(ctx context.Context, in *StreamTransactionsRequest, opts ...grpc.CallOption) (PiggyService_StreamTransactionsClient, error)
}

type piggyServiceClient struct {
	cc *grpc.ClientConn
}

func NewPiggyServiceClient(cc *grpc.ClientConn) PiggyServiceClient {
	return &piggyServiceClient{cc}
}

func (c *piggyServiceClient) SignUp(ctx context.Context, in *SignUpRequest, opts ...grpc.CallOption) (*SignUpResponse, error) {
	out := new(SignUpResponse)
	err := c.cc.Invoke(ctx, "/piggy.PiggyService/SignUp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *piggyServiceClient) AddBank(ctx context.Context, in *AddBankRequest, opts ...grpc.CallOption) (*AddBankResponse, error) {
	out := new(AddBankResponse)
	err := c.cc.Invoke(ctx, "/piggy.PiggyService/AddBank", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *piggyServiceClient) UpdateBudget(ctx context.Context, in *UpdateBudgetRequest, opts ...grpc.CallOption) (*UpdateBudgetResponse, error) {
	out := new(UpdateBudgetResponse)
	err := c.cc.Invoke(ctx, "/piggy.PiggyService/UpdateBudget", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *piggyServiceClient) TagTransaction(ctx context.Context, in *TagTransactionRequest, opts ...grpc.CallOption) (*TagTransactionResponse, error) {
	out := new(TagTransactionResponse)
	err := c.cc.Invoke(ctx, "/piggy.PiggyService/TagTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *piggyServiceClient) StreamTransactions(ctx context.Context, in *StreamTransactionsRequest, opts ...grpc.CallOption) (PiggyService_StreamTransactionsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_PiggyService_serviceDesc.Streams[0], "/piggy.PiggyService/StreamTransactions", opts...)
	if err != nil {
		return nil, err
	}
	x := &piggyServiceStreamTransactionsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PiggyService_StreamTransactionsClient interface {
	Recv() (*Transaction, error)
	grpc.ClientStream
}

type piggyServiceStreamTransactionsClient struct {
	grpc.ClientStream
}

func (x *piggyServiceStreamTransactionsClient) Recv() (*Transaction, error) {
	m := new(Transaction)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PiggyServiceServer is the api API for PiggyService service.
type PiggyServiceServer interface {
	// rpc to create a new user and add them to an existing team or create a new one.
	SignUp(context.Context, *SignUpRequest) (*SignUpResponse, error)
	// rpc to add a bank institution's credentials to a team for tracking
	AddBank(context.Context, *AddBankRequest) (*AddBankResponse, error)
	// rpc to update budget/bin data associated with a team
	UpdateBudget(context.Context, *UpdateBudgetRequest) (*UpdateBudgetResponse, error)
	// rpc to tag a transaction with a corresponding bin
	TagTransaction(context.Context, *TagTransactionRequest) (*TagTransactionResponse, error)
	// rpc to stream transactions given the request filter
	StreamTransactions(*StreamTransactionsRequest, PiggyService_StreamTransactionsServer) error
}

// UnimplementedPiggyServiceServer can be embedded to have forward compatible implementations.
type UnimplementedPiggyServiceServer struct {
}

func (*UnimplementedPiggyServiceServer) SignUp(ctx context.Context, req *SignUpRequest) (*SignUpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignUp not implemented")
}
func (*UnimplementedPiggyServiceServer) AddBank(ctx context.Context, req *AddBankRequest) (*AddBankResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBank not implemented")
}
func (*UnimplementedPiggyServiceServer) UpdateBudget(ctx context.Context, req *UpdateBudgetRequest) (*UpdateBudgetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBudget not implemented")
}
func (*UnimplementedPiggyServiceServer) TagTransaction(ctx context.Context, req *TagTransactionRequest) (*TagTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TagTransaction not implemented")
}
func (*UnimplementedPiggyServiceServer) StreamTransactions(req *StreamTransactionsRequest, srv PiggyService_StreamTransactionsServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamTransactions not implemented")
}

func RegisterPiggyServiceServer(s *grpc.Server, srv PiggyServiceServer) {
	s.RegisterService(&_PiggyService_serviceDesc, srv)
}

func _PiggyService_SignUp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignUpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PiggyServiceServer).SignUp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/piggy.PiggyService/SignUp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PiggyServiceServer).SignUp(ctx, req.(*SignUpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PiggyService_AddBank_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddBankRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PiggyServiceServer).AddBank(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/piggy.PiggyService/AddBank",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PiggyServiceServer).AddBank(ctx, req.(*AddBankRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PiggyService_UpdateBudget_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBudgetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PiggyServiceServer).UpdateBudget(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/piggy.PiggyService/UpdateBudget",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PiggyServiceServer).UpdateBudget(ctx, req.(*UpdateBudgetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PiggyService_TagTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TagTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PiggyServiceServer).TagTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/piggy.PiggyService/TagTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PiggyServiceServer).TagTransaction(ctx, req.(*TagTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PiggyService_StreamTransactions_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamTransactionsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PiggyServiceServer).StreamTransactions(m, &piggyServiceStreamTransactionsServer{stream})
}

type PiggyService_StreamTransactionsServer interface {
	Send(*Transaction) error
	grpc.ServerStream
}

type piggyServiceStreamTransactionsServer struct {
	grpc.ServerStream
}

func (x *piggyServiceStreamTransactionsServer) Send(m *Transaction) error {
	return x.ServerStream.SendMsg(m)
}

var _PiggyService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "piggy.PiggyService",
	HandlerType: (*PiggyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SignUp",
			Handler:    _PiggyService_SignUp_Handler,
		},
		{
			MethodName: "AddBank",
			Handler:    _PiggyService_AddBank_Handler,
		},
		{
			MethodName: "UpdateBudget",
			Handler:    _PiggyService_UpdateBudget_Handler,
		},
		{
			MethodName: "TagTransaction",
			Handler:    _PiggyService_TagTransaction_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamTransactions",
			Handler:       _PiggyService_StreamTransactions_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "service.proto",
}
